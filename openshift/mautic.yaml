kind: Template
apiVersion: v1
objects:
  - apiVersion: build.openshift.io/v1
    kind: BuildConfig
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: '${APP_NAME}:${IMAGE_TAG}'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: apache
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        dockerStrategy:
          pullSecret:
            name: artifactory-creds
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange
    metadata: 
      annotations:
        app.openshift.io/vcs-ref: ${GIT_REF}
        app.openshift.io/vcs-uri: ${GIT_REPO}
        openshift.io/generated-by: OpenShiftWebConsole
      labels:
        name: 'mautic'
        app: ${APP_NAME}
        group: ${APP_NAME}
        buildConfig: ${APP_NAME}
        app.kubernetes.io/component: ${APP_NAME}
        app.kubernetes.io/instance: ${APP_NAME}
        app.kubernetes.io/part-of: ${APP_NAME}-app
      name: ${APP_NAME}
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    spec:
      lookupPolicy:
        local: false
    metadata:
      annotations:
        app.openshift.io/vcs-ref: ${GIT_REF}
        app.openshift.io/vcs-uri: ${GIT_REPO}
        openshift.io/generated-by: OpenShiftWebConsole
      generation: 1
      labels:
        name: 'mautic'
        app: ${APP_NAME}
        buildConfig: ${APP_NAME}
        app.kubernetes.io/component: ${APP_NAME}
        app.kubernetes.io/instance: ${APP_NAME}
        app.kubernetes.io/part-of: ${APP_NAME}-app
      name: ${APP_NAME}
  
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${APP_NAME}-php-config
    spec:
      accessModes: 
      - ReadWriteOnce
      volumeMode: Filesystem
      resources:
        requests:
          storage: 1Gi
      storageClassName: ${STORAGE_CLASS_NAME}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${APP_NAME}-mariadb-data
    spec:
      accessModes: 
      - ReadWriteOnce
      volumeMode: Filesystem
      resources:
        requests:
          storage: 1Gi
      storageClassName: ${STORAGE_CLASS_NAME}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${APP_NAME}-media-images
    spec:
      accessModes: 
      - ReadWriteMany
      volumeMode: Filesystem
      resources:
        requests:
          storage: 0.5Gi
      storageClassName: ${STORAGE_CLASS_NAME}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${APP_NAME}-media-files
    spec:
      accessModes: 
      - ReadWriteMany
      volumeMode: Filesystem
      resources:
        requests:
          storage: 0.5Gi
      storageClassName: ${STORAGE_CLASS_NAME}
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    spec:
      progressDeadlineSeconds: 1200
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        deploymentconfig: ${APP_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          creationTimestamp: null
          labels:
            name: 'mautic'
            app: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
        spec:
          volumes:
          - name: ${APP_NAME}-cache
            emptyDir: {}
          - name: ${APP_NAME}-logs
            emptyDir: {}
          - name: ${APP_NAME}-php-config
            persistentVolumeClaim:
              claimName: ${APP_NAME}-php-config
          - name: ${APP_NAME}-media-images
            persistentVolumeClaim:
              claimName: ${APP_NAME}-media-images
          - name: ${APP_NAME}-media-files
            persistentVolumeClaim:
              claimName: ${APP_NAME}-media-files
          - name: ${APP_NAME}-cache-unsubscribe
            emptyDir: {}
          - name: ${APP_NAME}-theme
            emptyDir: {}
          - name: ${APP_NAME}-apache-conf
            configMap:
              name: ${APP_NAME}-apache-config
          initContainers:
            - env:
              - name: VOLUME_PATH
                value: /var/www/html/themes/
              image: ${IMAGE_REGISTRY}/${NAMESPACE}/mautic-init:latest
              name: mautic-init
              imagePullPolicy: Always
              volumeMounts:
              - name: ${APP_NAME}-theme
                mountPath: /var/www/html/themes/
          containers:
            - env:
                - name: MAUTIC_DB_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${APP_NAME}-db
                - name: MAUTIC_DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${APP_NAME}-db
                - name: MAUTIC_DB_NAME
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: ${APP_NAME}-db
                - name: MAUTIC_DB_HOST
                  value: ${APP_NAME}-db
                - name: MAUTIC_DB_PORT
                  value: "3306"
              image: ${IMAGE_REGISTRY}/${NAMESPACE}/${APP_NAME}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: ${APP_NAME}
              resources:
                limits:
                  cpu: 250m
                  memory: 600Mi
                requests:
                  cpu: 50m
                  memory: 200Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - name: ${APP_NAME}-apache-conf
                  mountPath: /etc/apache2/sites-enabled/000-default.conf
                  subPath: 000-default.conf
                - name: ${APP_NAME}-apache-conf
                  mountPath: /etc/apache2/ports.conf
                  subPath: ports.conf
                - name: ${APP_NAME}-cache
                  mountPath: /var/www/html/var/cache/
                - name: ${APP_NAME}-logs
                  mountPath: /var/www/html/var/logs/
                - name: ${APP_NAME}-php-config
                  mountPath: /var/www/html/app/config/
                - name: ${APP_NAME}-cache-unsubscribe
                  mountPath: /var/www/html/app/../var/tmp/twig/
                - name: ${APP_NAME}-theme
                  mountPath: /var/www/html/themes/
                - name: ${APP_NAME}-media-images
                  mountPath: /var/www/html/media/images
                - name: ${APP_NAME}-media-files
                  mountPath: /var/www/html/media/files
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            from:
              kind: ImageStreamTag
              name: "${APP_NAME}:${IMAGE_TAG}"
              namespace: "${NAMESPACE}"
            containerNames:
            - ${APP_NAME}
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
        app.openshift.io/vcs-ref: ${GIT_REF}
        app.openshift.io/vcs-uri: ${GIT_REPO}
        deployment.kubernetes.io/revision: '11'
        openshift.io/generated-by: OpenShiftWebConsole
      generation: 11
      labels:
        name: 'mautic'
        app: ${APP_NAME}
        deploymentConfig: ${APP_NAME}
        app.kubernetes.io/component: ${APP_NAME}
        app.kubernetes.io/instance: ${APP_NAME}
        app.kubernetes.io/part-of: ${APP_NAME}-app
      name: ${APP_NAME}
  - apiVersion: route.openshift.io/v1
    kind: Route
    spec:
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: ${APP_NAME}
        weight: 100
      wildcardPolicy: None
      tls:
        termination: Edge
        insecureEdgeTerminationPolicy: Redirect
    metadata:
      annotations:
        openshift.io/host.generated: 'true'
      labels:
        name: 'mautic'
        app: ${APP_NAME}
        deploymentConfig: ${APP_NAME}
        app.kubernetes.io/component: ${APP_NAME}
        app.kubernetes.io/instance: ${APP_NAME}
        app.kubernetes.io/part-of: ${APP_NAME}-app
      name: ${APP_NAME}
  - apiVersion: v1
    kind: Service
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: ${APP_NAME}
      sessionAffinity: None
      type: ClusterIP
    metadata:
      annotations:
        app.openshift.io/vcs-ref: ${GIT_REF}
        app.openshift.io/vcs-uri: ${GIT_REPO}
        openshift.io/generated-by: OpenShiftWebConsole
      labels:
        name: 'mautic'
        app: ${APP_NAME}
        deploymentConfig: ${APP_NAME}
        app.kubernetes.io/component: ${APP_NAME}
        app.kubernetes.io/instance: ${APP_NAME}
        app.kubernetes.io/part-of: ${APP_NAME}-app
      name: ${APP_NAME} 
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      annotations:
        openshift.io/host.generated: 'true'
      labels:
        name: 'mautic'
        app: ${APP_NAME}
        deploymentConfig: ${APP_NAME}
        app.kubernetes.io/component: ${APP_NAME}
        app.kubernetes.io/instance: ${APP_NAME}
        app.kubernetes.io/part-of: ${APP_NAME}-app
      name: ${APP_NAME}-apache-config
    data:
      000-default.conf: |
        <VirtualHost *:80>
        # The ServerName directive sets the request scheme, hostname and port that
        # the server uses to identify itself. This is used when creating
        # redirection URLs. In the context of virtual hosts, the ServerName
        # specifies what hostname must appear in the request's Host: header to
        # match this virtual host. For the default virtual host (this file) this
        # value is not decisive as it is used as a last resort host regardless.
        # However, you must set it for any further virtual host explicitly.
        #ServerName www.example.com

        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html

        # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
        # error, crit, alert, emerg.
        # It is also possible to configure the loglevel for particular
        # modules, e.g.
        #LogLevel info ssl:warn

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined

        # For most configuration files from conf-available/, which are
        # enabled or disabled at a global level, it is possible to
        # include a line for only one particular virtual host. For example the
        # following line enables the CGI configuration for this host only
        # after it has been globally disabled with "a2disconf".
        #Include conf-available/serve-cgi-bin.conf
        </VirtualHost>
        # vim: syntax=apache ts=4 sw=4 sts=4 sr noet

      ports.conf: |
        # If you just change the port or add more ports here, you will likely also
        # have to change the VirtualHost statement in
        # /etc/apache2/sites-enabled/000-default.conf
        Listen 8080
        # vim: syntax=apache ts=4 sw=4 sts=4 sr noet

  - apiVersion: v1
    kind: Service
    spec:
      ports:
        - name: ${APP_NAME}-db
          port: 3306
          protocol: TCP
          targetPort: 3306
      selector:
        name: ${APP_NAME}-db
      sessionAffinity: None
      type: ClusterIP
    metadata:
      annotations:
        template.openshift.io/expose-uri: 'mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mariadb")].port}'
      labels:
        name: 'mautic'
        app: ${APP_NAME}
        deploymentConfig: ${APP_NAME}-db
        group: ${APP_NAME}
      name: ${APP_NAME}-db
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        name: ${APP_NAME}-db
      strategy:
        activeDeadlineSeconds: 21600
        recreateParams:
          timeoutSeconds: 600
        resources: {}
        type: Recreate
      template:
        metadata:
          creationTimestamp: null
          labels:
            name: ${APP_NAME}-db
        spec:
          containers:
            - env:
                - name: MYSQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${APP_NAME}-db
                - name: MYSQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${APP_NAME}-db
                - name: MYSQL_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-root-password
                      name: ${APP_NAME}-db
                - name: MYSQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: ${APP_NAME}-db
              image: registry.redhat.io/rhel8/mariadb-103
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 3306
                timeoutSeconds: 1
              name: mariadb
              ports:
                - containerPort: 3306
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - '-i'
                    - '-c'
                    - >-
                      MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u
                      $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
                failureThreshold: 3
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              resources:
                limits:
                  cpu: '1'
                  memory: 1Gi
                requests:
                  cpu: '.5'
                  memory: .5Gi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /var/lib/mysql/data
                  name: ${APP_NAME}-mariadb-data
                - mountPath: /var/lib/mysql
                  name: ${APP_NAME}-mariadb-docker
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - persistentVolumeClaim:
                claimName: ${APP_NAME}-mariadb-data
              name: ${APP_NAME}-mariadb-data
            - name: ${APP_NAME}-mariadb-docker
              emptyDir: {}
      test: false
    metadata:
      annotations:
        app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"${APP_NAME}"}]'
      generation: 2
      labels:
        name: 'mautic'
        deploymentConfig: ${APP_NAME}-db
        group: ${APP_NAME}
        app: ${APP_NAME}
      name: ${APP_NAME}-db
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewBuild
      creationTimestamp: null
      labels:
        name: 'mautic'
        build: ${APP_NAME}-init
      name: ubuntu
    spec:
      lookupPolicy:
        local: false
      tags:
      - annotations:
          openshift.io/imported-from: ubuntu:latest
        from:
          kind: DockerImage
          name: docker.io/ubuntu:latest
        generation: null
        importPolicy: {}
        name: latest
        referencePolicy:
          type: ""
    status:
      dockerImageRepository: ""
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewBuild
      creationTimestamp: null
      labels:
        name: 'mautic'
        build: ${APP_NAME}-init
      name: mautic-init
    spec:
      lookupPolicy:
        local: false
    status:
      dockerImageRepository: ""
  - apiVersion: build.openshift.io/v1
    kind: BuildConfig
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewBuild
      creationTimestamp: null
      labels:
        name: 'mautic'
        build: ${APP_NAME}-init
      name: ${APP_NAME}-init
    spec:
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: mautic-init:latest
      postCommit: {}
      resources: {}
      source:
        contextDir: mautic-init
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        type: Git
      strategy:
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: ubuntu:latest
        type: Docker
      triggers:
      - type: ConfigChange
    status:
      lastVersion: 0

parameters:
- name: APP_NAME
  displayName: App name
  description: the value used to group components by a common name
  required: true
- name: GIT_REF
  displayName: Git Branch
  description: the git branch to build from
  required: true
- name: GIT_REPO
  displayName: Git repository
  description: the git repo to build from
  required: true
- name: NAMESPACE
  displayName: Namespace
  description: the namespace of the app
  required: true
- description: A name used for all objects
  displayName: IMAGE_TAG
  name: IMAGE_TAG
  required: true
- description: registry where mautic is found/stored
  displayName: Image Registry
  name: IMAGE_REGISTRY
  required: true
  value: image-registry.openshift-image-registry.svc:5000
- description: A name used for all objects
  displayName: STORAGE_CLASS_NAME
  name: STORAGE_CLASS_NAME
  required: true